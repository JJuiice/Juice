; Copyright (c) 2021 Ojas Anand.
;
; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation;
; either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
; You should have received a copy of the GNU General Public License along with this program. If not, see https://www.gnu.org/licenses/. 

IO_START:
[BITS 16]

; LOAD DH SECTORS TO ES:BX FROM DRIVE DL
DSK_LD:
PUSHA           ; PUSH ALL REGISTER VALUES TO THE STACK
PUSH DX         ; PUSH DX TO THE STACK AS WE WILL NEED IT FOR LATER

MOV AH, 0x02    ; BIOS READ SECTOR FUNCTION
MOV AL, DH      ; READ DH SECTORS
MOV CH, 0x00    ; SELECT CYLINDER 0
MOV DH, 0x00    ; SELECT HEAD 0
MOV CL, 0X02    ; START READING FROM SECOND SECTOR (BOOT SECTOR IS THE FIRST ONE, I.E. THIS ONE)
INT 0x13        ; BIOS READ INTERRUPT

JC DSK_ERR      ; JUMP IF CARRY FLAG IS SET (ERROR INDICATED)

POP DX          ; RESTORE DX FROM THE STACK
CMP DH, AL      ; IF AL != DH (SECTORS READ VS SECTORS EXPECTED)
JNE DSK_ERR     ; DISP ERR

POPA            ; RETURN ALL REGISTERS PUSHED TO THE STACK TO THEIR ORIGINAL LOCATIONS
RET             ; FUNCTION RETURN 

; DISK ERROR HANDLING
DSK_ERR:
MOV SI, DSK_ERR_MSG
CALL PRNT_STR
JMP $

; PRINT STRING POINTED AT BY SI REGISTER
PRNT_STR:
PUSHA           ; PUSH ALL REGISTER VALUES TO THE STACK

LODSB           ; LOAD BYTE AT ADDRESS DS:(E)SI INTO AL MOV AH, 0X0E ; SET BIOS SCREEN TO TTY MODE
MOV AH, 0x0E    ; SET BIOS SCREEN TO TTY MODE

PRNT_CHAR:
INT 0x10
LODSB
CMP AL, 0
JNE PRNT_CHAR
 
POPA            ; RETURN ORIGINAL REG VALUES TO THEIR RESPECTIVE LOCATIONS
RET             ; RETURN FROM FUNCTION

; PRINT HEX VALUE AT AX AS STRING LITERAL 
PRNT_HEX:
PUSHA           ; PUSH ALL REGISTER VALUES TO THE STACK

MOV BX, 2

MOV DL, AH 
SHR DL, 4 
CALL SET_HEX_OUT
INC BX

MOV DL, AH
AND DL, 0x0F
CALL SET_HEX_OUT
INC BX

MOV DL, AL
SHR DL, 4
CALL SET_HEX_OUT
INC BX

MOV DL, AL
AND DL, 0x0F
CALL SET_HEX_OUT
INC BX

MOV SI, HEX_OUT
CALL PRNT_STR

POPA
RET

; SET THE APPROPRIATE HEX VALUE IN MEMORY
SET_HEX_OUT:
CMP DL, 9
JG CORRECTION
OR DL, 0x30
MOV [HEX_OUT+BX], DL
RET

    CORRECTION:
    SUB DL, 9
    OR DL, 0x40
    MOV [HEX_OUT+BX], DL
    RET

; VARS
BOOT_DRV: DB 0
HEX_OUT: DB '0x0000', 0
DSK_ERR_MSG: DB 'DISK READ ERROR!', 0

[BITS 32]
; PRINT STRING POINTED AT BY SI REGISTER
PRNT_STR_PM:
PUSHA               ; PUSH ALL REGISTER VALUES TO THE STACK
LODSB               ; LOAD BYTE AT ADDRESS DS:(E)SI INTO AL MOV AH, 0X0E ; SET BIOS SCREEN TO TTY MODE
MOV EDX, VID_MEM    ; SET EDX TO THE START OF VIDEO MEMORY

PRNT_CHAR_PM:
MOV AH, WHT_ON_BLK  ; STORE VIDEO ATTRIBUTES INRO AH
MOV [EDX], AX       ; STORE CHAR AND ATTRS AT CURRENT CHAR CELL
ADD EDX, 2          ; MOVE TO NEXT CHAR CELL IN VID MEM

; STOP EXECUTION IF WE ARE AT THE END OF THE STRING
LODSB
CMP AL, 0
JNE PRNT_CHAR_PM     
 
POPA            ; RETURN ORIGINAL REG VALUES TO THEIR RESPECTIVE LOCATIONS
RET             ; RETURN FROM FUNCTION

VID_MEM: EQU 0xB8000
WHT_ON_BLK: EQU 0x0F
IO_END:
